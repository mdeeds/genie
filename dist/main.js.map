{"version":3,"sources":["webpack:///./src/index.js","webpack:///./src/moveSorter.js","webpack:///./src/table.js","webpack:///webpack/bootstrap","webpack:///webpack/startup"],"names":[],"mappings":";;;;;;;;AAAa;AACb,6BAA6C,CAAC,cAAc,CAAC;AAC7D,qBAAqB,mBAAO,CAAC,GAAc;AAC3C,gBAAgB,mBAAO,CAAC,GAAS;AACjC;AACA;AACA,iC;;;;;;;ACNa;AACb,8CAA6C,CAAC,cAAc,EAAC;AAC7D,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,kBAAkB;AACpE;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,sC;;;;;;;ACpFa;AACb,8CAA6C,CAAC,cAAc,EAAC;AAC7D,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,EAAE;AAC9B,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,EAAE;AAChC,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC,8BAA8B,EAAE;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,gCAAgC;AAC9D,6BAA6B,gCAAgC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,iC;;;;;;UClKA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;UCrBA;UACA;UACA;UACA","file":"main.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst moveSorter_1 = require(\"./moveSorter\");\nconst table_1 = require(\"./table\");\nconst table = new table_1.Table();\nconst sorter = new moveSorter_1.MoveSorter();\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MoveSorter = void 0;\nclass SortArea {\n    constructor(label, type, container) {\n        this.element = document.createElement('div');\n        const labelDiv = document.createElement('div');\n        labelDiv.innerText = label;\n        this.element.appendChild(labelDiv);\n        this.element.classList.add('sortCell');\n        this.element.classList.add(type);\n        this.element.addEventListener('dragover', (ev) => {\n            ev.preventDefault();\n        });\n        this.element.addEventListener('drop', (ev) => {\n            ev.preventDefault();\n            this.add(MoveIcon.moveInMotion);\n        });\n        container.appendChild(this.element);\n    }\n    add(m) {\n        for (const child of this.element.childNodes) {\n            if (child['moveIcon']) {\n                const childM = child['moveIcon'];\n                if (m.getSortScore() < childM.getSortScore()) {\n                    this.element.insertBefore(m.element, childM.element);\n                    return;\n                }\n            }\n        }\n        this.element.appendChild(m.element);\n    }\n}\nclass MoveIcon {\n    constructor(score) {\n        this.score = score;\n        this.element = document.createElement('div');\n        this.element.classList.add('move');\n        this.element.draggable = true;\n        this.element.style.filter = `hue-rotate(${score * 0.9 - 0.5}turn)`;\n        this.element.addEventListener('dragstart', (ev) => {\n            this.element.style.opacity = '0.5';\n            MoveIcon.moveInMotion = this;\n        });\n        this.element.addEventListener('dragend', (ev) => {\n            this.element.style.opacity = '';\n        });\n        this.element.addEventListener('mousedown', (ev) => {\n            for (const selected of document.getElementsByClassName('selected')) {\n                selected.classList.remove('selected');\n            }\n            this.element.classList.add('selected');\n        });\n        this.element['moveIcon'] = this;\n    }\n    getSortScore() {\n        return Math.abs(this.score - 0.5);\n    }\n}\nMoveIcon.moveInMotion = null;\nclass MoveSorter {\n    // private goodMoves: SortArea;\n    // private badMoves: SortArea;\n    constructor() {\n        const body = document.getElementsByTagName('body')[0];\n        const container = document.createElement('div');\n        container.classList.add('sortArea');\n        body.appendChild(container);\n        this.unsortedMoves = new SortArea('unsorted', 'unsorted', container);\n        this.legalMoves = new SortArea('legal', 'legal', container);\n        this.illegalMoves = new SortArea('illegal', 'illegal', container);\n        // this.goodMoves = new SortArea('good', 'good', this.legalMoves.element);\n        // this.badMoves = new SortArea('bad', 'bad', this.legalMoves.element);\n        for (let i = 0; i < 10; ++i) {\n            const m = new MoveIcon(Math.random());\n            this.unsortedMoves.add(m);\n        }\n        this.legalMoves.add(new MoveIcon(Math.random()));\n        this.illegalMoves.add(new MoveIcon(Math.random()));\n        // const m3 = new MoveIcon(this.goodMoves.element, Math.random());\n        // const m4 = new MoveIcon(this.badMoves.element, Math.random());\n    }\n}\nexports.MoveSorter = MoveSorter;\n//# sourceMappingURL=moveSorter.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Table = void 0;\nclass Token {\n    constructor(label, element) {\n        this.magnet = null;\n        this.label = label;\n        this.element = element;\n    }\n}\nclass Magnet {\n    constructor(element) {\n        this.token = null;\n        this.element = element;\n    }\n}\nclass Table {\n    constructor() {\n        this.magnets = [];\n        this.tokenIndex = new Map();\n        const body = document.getElementsByTagName('body')[0];\n        this.container = document.createElement('div');\n        this.container.classList.add('table');\n        body.appendChild(this.container);\n        this.addBag(\"X\", 50, 100);\n        this.addBag(\"O\", 50, 200);\n        for (let i = 0; i < 3; ++i) {\n            for (let j = 0; j < 3; ++j) {\n                this.addMagnet(i * 50 + 200, j * 50 + 100);\n            }\n        }\n        this.display = document.createElement('div');\n        this.display.classList.add('display');\n        body.appendChild(this.display);\n        this.display.innerText = \"** D I S P L A Y **\";\n        this.updateDisplay();\n    }\n    updateDisplay() {\n        this.display.innerText = `${this.getStateData()}`;\n    }\n    addBag(label, x, y) {\n        if (!this.tokenIndex.has(label)) {\n            this.tokenIndex.set(label, this.tokenIndex.size);\n        }\n        const elt = document.createElement('span');\n        elt.classList.add('bag');\n        elt.style.left = `${x}px`;\n        elt.style.top = `${y}px`;\n        elt.innerText = label;\n        this.container.appendChild(elt);\n        elt.addEventListener('mousedown', (me) => {\n            const t = this.makeToken(label, x, y);\n            this.handleMouseEvent(t, me);\n        });\n    }\n    makeToken(label, x, y) {\n        if (!this.tokenIndex.has(label)) {\n            this.tokenIndex.set(label, this.tokenIndex.size);\n        }\n        const token = document.createElement('span');\n        token.innerText = label;\n        token.classList.add('token');\n        token.style.left = `${x}px`;\n        token.style.top = `${y}px`;\n        const t = new Token(label, token);\n        token.addEventListener('mousedown', (me) => {\n            this.handleMouseEvent(t, me);\n        });\n        token.addEventListener('mousemove', (me) => {\n            this.handleMouseEvent(t, me);\n        });\n        token.addEventListener('mouseout', (me) => {\n            this.handleMouseEvent(t, me);\n        });\n        token.addEventListener('mouseup', (me) => {\n            this.handleMouseEvent(t, me);\n        });\n        this.container.appendChild(token);\n        return t;\n    }\n    addMagnet(x, y) {\n        const magnet = document.createElement('span');\n        magnet.classList.add('magnet');\n        magnet.style.left = `${x}px`;\n        magnet.style.top = `${y}px`;\n        this.container.appendChild(magnet);\n        const m = new Magnet(magnet);\n        this.magnets.push(m);\n    }\n    intersects(a, b) {\n        if (a.left <= b.right && a.top <= b.bottom &&\n            a.right >= b.left && a.bottom >= b.top) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    moveToXY(token, x, y) {\n        const bb = this.container.getBoundingClientRect();\n        const tokenBB = token.getBoundingClientRect();\n        token.style.left = `${x - tokenBB.width / 2 - bb.left}px`;\n        token.style.top = `${y - tokenBB.height / 2 - bb.top}px`;\n    }\n    moveToCenter(token, location) {\n        const x = (location.left + location.right) / 2;\n        const y = (location.top + location.bottom) / 2;\n        this.moveToXY(token, x, y);\n    }\n    checkMagnets(token) {\n        const tokenBB = token.element.getBoundingClientRect();\n        for (const m of this.magnets) {\n            const magnetBB = m.element.getBoundingClientRect();\n            if (this.intersects(magnetBB, tokenBB)) {\n                this.moveToCenter(token.element, magnetBB);\n                m.token = token;\n                token.magnet = m;\n                break;\n            }\n        }\n        this.updateDisplay();\n    }\n    handleMouseEvent(token, ev) {\n        ev.preventDefault();\n        switch (ev.type) {\n            case 'mousemove':\n            case 'mouseout':\n                if (this.dragging != token) {\n                    return;\n                }\n                break;\n            case 'mousedown':\n                this.dragging = token;\n                this.dragging.element.classList.add('dragging');\n                if (token.magnet !== null) {\n                    token.magnet.token = null;\n                    token.magnet = null;\n                }\n                break;\n            case 'mouseup':\n                this.checkMagnets(token);\n                this.dragging.element.classList.remove('dragging');\n                this.dragging = null;\n                return;\n        }\n        this.moveToXY(token.element, ev.clientX, ev.clientY);\n    }\n    getStateData() {\n        const numTokens = this.tokenIndex.size;\n        const numMagnets = this.magnets.length;\n        const result = new Float32Array(numTokens * numMagnets);\n        for (let i = 0; i < this.magnets.length; ++i) {\n            const m = this.magnets[i];\n            if (m.token !== null) {\n                const tokenIndex = this.tokenIndex.get(m.token.label);\n                result[i + tokenIndex * numMagnets] = 1.0;\n            }\n        }\n        return result;\n    }\n}\nexports.Table = Table;\n//# sourceMappingURL=table.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module\n__webpack_require__(138);\n// This entry module used 'exports' so it can't be inlined\n"],"sourceRoot":""}